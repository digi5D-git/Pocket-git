/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Z=Object.create;var F=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,Q=Object.prototype.hasOwnProperty;var K=l=>F(l,"__esModule",{value:!0});var ee=(l,t)=>{K(l);for(var e in t)F(l,e,{get:t[e],enumerable:!0})},te=(l,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Y(t))!Q.call(l,n)&&n!=="default"&&F(l,n,{get:()=>t[n],enumerable:!(e=X(t,n))||e.enumerable});return l},b=l=>te(K(F(l!=null?Z(q(l)):{},"default",l&&l.__esModule&&"default"in l?{get:()=>l.default,enumerable:!0}:{value:l,enumerable:!0})),l);ee(exports,{default:()=>U});var E=b(require("obsidian"));var I={BLOCK_ID:/\^([a-zA-Z0-9-]+)$/,FILE_BLOCK_ID:/([^#\^]+)#\^([a-zA-Z0-9-]+)$/,LINK_CONTENT:/\[\[([^\]#|]+)/};function C(l){if(!l)return"Unknown File";let t=l.split("/");return(t.length>0?t[t.length-1]:l).replace(/\.md$/,"")}function D(l){let t=l.match(I.LINK_CONTENT);return t?t[1]:l}function _(l,t){let e=l.match(I.FILE_BLOCK_ID);if(e)return{fileName:e[1],blockId:e[2]};if(e=l.match(I.BLOCK_ID),e){let n=t.workspace.getActiveFile();if(n)return{fileName:C(n.path),blockId:e[1]}}return null}var v=b(require("obsidian")),S=class extends v.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this,e=this;t.empty(),new v.Setting(e.containerEl).setName("Link updates").setHeading(),new v.Setting(t).setName("Force update all block references").setDesc("Update all block references, even if they point to valid blocks in other files. By default (off), only broken or invalid block references will be updated.").addToggle(n=>{n.setValue(e.plugin.settings.replaceExistingBlockLinks).onChange(async i=>{e.plugin.settings.replaceExistingBlockLinks=i,await e.plugin.saveSettings()})}),new v.Setting(t).setName("Show confirmation dialog").setDesc("Show a dialog to review and confirm changes before updating any links").addToggle(n=>{n.setValue(e.plugin.settings.showConfirmationDialog).onChange(async i=>{e.plugin.settings.showConfirmationDialog=i,await e.plugin.saveSettings()})}),new v.Setting(e.containerEl).setName("Change tracking").setHeading(),new v.Setting(t).setName("Enable change logging").setDesc("Keep a record of all link updates for future reference").addToggle(n=>{n.setValue(e.plugin.settings.enableChangeLogging).onChange(async i=>{e.plugin.settings.enableChangeLogging=i,await e.plugin.saveSettings()})}),e.plugin.settings.enableChangeLogging&&new v.Setting(t).setName("Log file path").setDesc("Path to the log file (relative to vault root)").addText(n=>{n.setValue(e.plugin.settings.logFilePath).onChange(async i=>{e.plugin.settings.logFilePath=i,await e.plugin.saveSettings()})})}};var G={replaceExistingBlockLinks:!1,enableChangeLogging:!0,logFilePath:"link-maintainer-changes.md",showConfirmationDialog:!0};var L=b(require("obsidian"));var k;(function(n){n.NOTE="note",n.BLOCK="block",n.HEADING="heading"})(k||(k={}));var A=class extends L.Modal{constructor(t,e){super(t);this.blockId=null;this.headingText=null;this.onSubmit=e,this.linkType=k.NOTE}onOpen(){let{contentEl:t}=this,e=this;t.addClass("link-maintainer-modal"),t.createEl("h2",{text:"Link Maintainer: Update link references"});let n=t.createDiv({cls:"setting-item"});n.createEl("label",{text:"Link type:"});let i=n.createEl("select");i.createEl("option",{text:"Note link ([[filename]])",value:k.NOTE}),i.createEl("option",{text:"Block link ([[filename#^blockid]])",value:k.BLOCK}),i.createEl("option",{text:"Heading link ([[filename#Heading]])",value:k.HEADING}),i.addEventListener("change",a=>{let d=a.target.value;e.linkType=d});let c=t.createDiv({cls:"setting-item"});c.createEl("label",{text:"Old file name:"}),new L.TextComponent(c).setPlaceholder("Enter old file name (e.g., fooA)").onChange(a=>e.oldFileName=a);let h=t.createDiv({cls:"setting-item"});h.createEl("label",{text:"New file name:"}),new L.TextComponent(h).setPlaceholder("Enter new file name (e.g., fooB)").onChange(a=>e.newFileName=a);let s=t.createDiv({cls:"setting-item block-container"});s.createEl("label",{text:"Block ID:"});let p=new L.TextComponent(s).setPlaceholder("Enter block ID (e.g., bar1234)").onChange(a=>e.blockId=a);s.toggleClass("active",!1);let o=t.createDiv({cls:"setting-item heading-container"});o.createEl("label",{text:"Heading:"});let f=new L.TextComponent(o).setPlaceholder("Enter heading text (e.g., Introduction)").onChange(a=>e.headingText=a);o.toggleClass("active",!1),i.addEventListener("change",a=>{let d=a.target.value;s.toggleClass("active",d===k.BLOCK),o.toggleClass("active",d===k.HEADING)}),t.createDiv({cls:"setting-item"}).createEl("button",{text:"Search"}).addEventListener("click",()=>{if(!e.oldFileName||!e.newFileName){new L.Notice("Please enter both file names");return}let a=null;switch(e.linkType){case k.BLOCK:if(!e.blockId){new L.Notice("Please enter a block ID");return}a=e.blockId;break;case k.HEADING:if(!e.headingText){new L.Notice("Please enter a heading");return}a=e.headingText;break}e.onSubmit(e.oldFileName,e.newFileName,a,e.linkType),e.close()})}onClose(){let{contentEl:t}=this,e=this;t.empty()}};var B=b(require("obsidian")),N=class extends B.Modal{constructor(t,e,n,i,c,h){super(t);this.matches=e,this.newFileName=n,this.reference=i!=null?i:null,this.linkType=c,this.onConfirm=h}onOpen(){var g;let{contentEl:t}=this,e=this;t.empty(),t.addClass("link-maintainer-modal");let n=t.createDiv({cls:"link-maintainer-info"});n.createEl("div",{cls:"link-maintainer-info-item",text:`Block ID: ^${e.reference}`});let i=((g=e.matches[0])==null?void 0:g.oldFileName)||"";i&&n.createEl("div",{cls:"link-maintainer-info-item",text:`Old file name: ${i}`}),n.createEl("div",{cls:"link-maintainer-info-item",text:`New file name: ${e.newFileName}`}),t.createEl("h3",{text:"Found references:"});let c=e.matches.filter(a=>!a.isCanvasNode),h=e.matches.filter(a=>a.isCanvasNode),s=t.createEl("div",{cls:"link-maintainer-match-list"}),p=(a,d,m)=>{let u=s.createEl("div",{cls:"link-maintainer-match-item"}),w=u.createEl("div",{cls:"link-maintainer-file-info"});w.createSpan({text:`${m} ${d+1}: `});let y=e.app.vault.getAbstractFileByPath(a.file);if(y instanceof B.TFile){let W=y.basename;w.createEl("a",{text:`[[${W}${a.isCanvasNode?".canvas":".md"}]]`,cls:"link-maintainer-file-link"}).addEventListener("click",async ie=>{let H=e.app.workspace.getLeaf();await H.openFile(y);let M=H.view;if(M.editor){let $={line:a.lineNumber,ch:0};M.editor.setCursor($),M.editor.scrollIntoView({from:$,to:$},!0)}})}a.isCanvasNode?u.createEl("div",{cls:"link-maintainer-line-number",text:`Node ID: ${a.nodeId}`}):u.createEl("div",{cls:"link-maintainer-line-number",text:`Line ${a.lineNumber+1}:`}),u.createEl("div",{cls:"link-maintainer-line-content",text:a.lineContent})};c.length>0&&(s.createEl("h4",{text:`Markdown files (${c.length})`,cls:"link-maintainer-group-header"}),c.forEach((a,d)=>{p(a,d,"Markdown file")})),h.length>0&&(s.createEl("h4",{text:`Canvas files (${h.length})`,cls:"link-maintainer-group-header"}),h.forEach((a,d)=>{p(a,d,"Canvas File")}));let o=t.createEl("div",{cls:"link-maintainer-button-container"});o.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{e.close()}),o.createEl("button",{text:"Update references",cls:"mod-cta"}).addEventListener("click",()=>{e.close(),e.onConfirm(e.matches,e.newFileName,e.reference,e.linkType)})}onClose(){let{contentEl:t}=this,e=this;t.empty()}};var R=class{constructor(t,e){this.app=t;this.replaceLinks=e}async searchLinks(t,e,n,i){let c=[],h=this.app.vault.getMarkdownFiles(),s=t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),p=n?n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"):"",o;switch(i){case k.BLOCK:o=`(!?\\[\\[)${s}\\s*#\\^${p}(\\|[^\\]]+)?\\]\\]`;break;case k.HEADING:o=`(!?\\[\\[)${s}\\s*#${p}(\\|[^\\]]+)?\\]\\]`;break;default:o=`(!?\\[\\[)${s}(\\|[^\\]]+)?\\]\\]`}let f=new RegExp(o,"g");for(let r of h)(await this.app.vault.read(r)).split(`
`).forEach((d,m)=>{let u;for(;(u=f.exec(d))!==null;)c.push({file:r.path,lineContent:d,lineNumber:m,linkText:u[0],oldFileName:null})});new N(this.app,c,e,n,i,(r,g,a,d)=>{this.replaceLinks(r,g,a,d)}).open()}};var x=b(require("obsidian"));var P=class{constructor(t,e,n){this.app=t;this.replaceLinks=e;this.replaceExistingBlockLinks=n}async searchAndUpdateBlockReferences(t,e){let{matches:n,alreadyUpdatedCount:i}=await this.searchBlockReferences(t,e);if(n.length===0){i>0?new x.Notice(`All found references (${i}) are already up to date`):new x.Notice("No references found");return}new N(this.app,n,e,t,k.BLOCK,this.replaceLinks.bind(this)).open()}async searchBlockReferences(t,e){let n=[],i=0,h=this.app.vault.getFiles().filter(o=>(o.extension==="md"||o.extension==="canvas")&&o.basename!==e),s=new RegExp(`\\[\\[([^\\]]+)#\\^${t}(?:\\|[^\\]]+)?\\]\\]|\\^${t}(?=[\\s\\]\\n]|$)`),p=new RegExp(`\\[\\[${e}#\\^${t}(?:\\|[^\\]]+)?\\]\\]`);for(let o of h){let f=await this.app.vault.read(o);if(o.extension==="canvas")try{let r=JSON.parse(f);if(r.nodes){for(let g of r.nodes)if(g.text&&g.text.match(s)){if(p.test(g.text)){i++;continue}let d=g.text.match(/\[\[([^\]#|]+)/),m=d?d[1].trim():null;if(m){let u=this.app.vault.getAbstractFileByPath(`${m}.md`);if(u instanceof x.TFile){let w=await this.app.vault.read(u);if(!this.replaceExistingBlockLinks&&w.includes(`^${t}`))continue}}n.push({file:o.path,lineContent:g.text,lineNumber:r.nodes.indexOf(g),linkText:g.text,oldFileName:m,isCanvasNode:!0,nodeId:g.id})}}}catch(r){console.error(`Error parsing canvas file ${o.path}:`,r);continue}else{let r=f.split(`
`);for(let g=0;g<r.length;g++){let a=r[g];if(a.match(s)){if(p.test(a)){i++;continue}let m=a.match(/\[\[([^\]#|]+)/),u=m?m[1].trim():null;if(u){let w=this.app.vault.getAbstractFileByPath(`${u}.md`);if(w instanceof x.TFile){let y=await this.app.vault.read(w);if(!this.replaceExistingBlockLinks&&y.includes(`^${t}`))continue}}n.push({file:o.path,lineContent:a,lineNumber:g,linkText:a,oldFileName:u})}}}}return{matches:n,alreadyUpdatedCount:i}}};var T=b(require("obsidian"));var O=class{constructor(t){this.deps=t}async replaceLinks(t,e,n,i){if(n&&this.deps.initBatchLog(n,e),this.deps.settings.showConfirmationDialog&&!await this.deps.showConfirmationDialog(t,e)){this.deps.clearBatchLog();return}let c=0,h=new Map;t.forEach(s=>{let p=h.get(s.file)||[];p.push(s),h.set(s.file,p)});for(let[s,p]of h){let o=this.deps.plugin.app.vault.getAbstractFileByPath(s);if(!(o instanceof T.TFile))continue;let f=await this.deps.plugin.app.vault.read(o);if(o.extension==="canvas"){let{modified:r,updateCount:g}=await this.updateCanvasFile(o,f,p,e,n,s);r&&(c+=g)}else{let{modified:r,updateCount:g}=await this.updateMarkdownFile(o,f,p,e,n,s);r&&(c+=g)}}c>0?(await this.deps.writeBatchToLog(),new T.Notice(`Successfully updated ${c} link${c===1?"":"s"} to "${C(e)}"`)):new T.Notice("No links needed updating")}async updateCanvasFile(t,e,n,i,c,h){let s=!1,p=0;try{let o=JSON.parse(e);if(!o.nodes)return{modified:s,updateCount:p};n.forEach(f=>{if(!f.isCanvasNode||!f.nodeId)return;let r=o.nodes.find(d=>d.id===f.nodeId);if(!(r==null?void 0:r.text))return;let{text:g,updated:a}=this.updateNodeText(r.text,f,i,c,h);a&&(r.text=g,s=!0,p++)}),s&&await this.deps.plugin.app.vault.modify(t,JSON.stringify(o,null,2))}catch(o){console.error(`Error updating canvas file ${h}:`,o)}return{modified:s,updateCount:p}}async updateMarkdownFile(t,e,n,i,c,h){let s=!1,p=0,o=e.split(`
`);return n.forEach(f=>{let r=o[f.lineNumber],{text:g,updated:a}=this.updateNodeText(r,f,i,c,h);a&&(o[f.lineNumber]=g,s=!0,p++)}),s&&await this.deps.plugin.app.vault.modify(t,o.join(`
`)),{modified:s,updateCount:p}}updateNodeText(t,e,n,i,c){if(new RegExp(`\\[\\[${n}#\\^${i}(?:\\|[^\\]]+)?\\]\\]`).test(t))return{text:t,updated:!1};let s;if(e.oldFileName){let p=new RegExp(`\\[\\[${e.oldFileName}#\\^${i}(?:\\|[^\\]]+)?\\]\\]`);s=t.replace(p,`[[${n}#^${i}]]`)}else{let p=new RegExp(`\\^${i}(?=[\\s\\]\\n]|$)`);s=t.replace(p,`[[${n}#^${i}]]`)}if(s!==t){let p={originalContent:t,newContent:s,lineNumber:e.lineNumber,originalFile:c};return this.deps.logChange(p),{text:s,updated:!0}}return{text:t,updated:!1}}};var V=b(require("obsidian"));async function j(l,t,e){return new Promise(n=>{let i=new V.Modal(l);i.titleEl.setText("Confirm link updates");let c=i.contentEl;c.empty();let h=t.filter(r=>!r.isCanvasNode),s=t.filter(r=>r.isCanvasNode);if(c.createEl("p",{text:`You are about to update ${t.length} block reference${t.length>1?"s":""} to point to "${e}":`,attr:{style:"margin-bottom: 12px;"}}),t.length>0){let r=c.createEl("div",{cls:"link-maintainer-changes-list",attr:{style:"max-height: 200px; overflow-y: auto; margin-bottom: 12px; padding: 8px; border: 1px solid var(--background-modifier-border); border-radius: 4px;"}}),g=(a,d,m)=>{let u=r.createEl("div",{attr:{style:"margin-bottom: 8px; font-size: 0.9em;"}});u.createEl("div",{text:`${d+1}. In ${m}: ${a.file}${a.isCanvasNode?" (Node ID: "+a.nodeId+")":""}`,attr:{style:"color: var(--text-muted);"}}),u.createEl("div",{text:a.lineContent,attr:{style:"font-family: monospace; white-space: pre-wrap; margin-top: 4px;"}})};h.length>0&&(r.createEl("div",{text:`Markdown files (${h.length})`,attr:{style:"font-weight: bold; margin: 8px 0;"}}),h.forEach((a,d)=>{g(a,d,"Markdown file")})),s.length>0&&(r.createEl("div",{text:`Canvas files (${s.length})`,attr:{style:"font-weight: bold; margin: 8px 0; margin-top: 16px;"}}),s.forEach((a,d)=>{g(a,d,"Canvas File")}))}let p=c.createEl("p",{cls:"link-maintainer-warning",text:"This action cannot be automatically undone. Changes will be logged if logging is enabled.",attr:{style:"color: var(--text-warning); margin-bottom: 12px;"}}),o=c.createEl("div",{attr:{style:"display: flex; justify-content: flex-end; gap: 8px;"}});o.createEl("button",{text:"Cancel",attr:{style:"padding: 4px 12px;"}}).onclick=()=>{i.close(),n(!1)};let f=o.createEl("button",{cls:"mod-cta",text:"Confirm updates",attr:{style:"padding: 4px 12px;"}});f.onclick=()=>{i.close(),n(!0)},i.open()})}var z=b(require("obsidian"));async function J(l,t,e){var g,a,d;if(!t.enableChangeLogging||!e)return;let n=l.vault.getAbstractFileByPath(t.logFilePath),i=e,c=i.changes&&i.changes.length>0?i.changes[0]:null,h=c&&c.originalContent?D(c.originalContent.trim()):"",s=c&&c.newContent?D(c.newContent.trim()):"",p=((g=i.changes)==null?void 0:g.filter(m=>!m.originalFile.endsWith(".canvas")))||[],o=((a=i.changes)==null?void 0:a.filter(m=>m.originalFile.endsWith(".canvas")))||[],f=[`## Batch update at ${i.timestamp}`,"",`> Block reference update: ${i.blockId} \u2192 ${C(i.newFileName)}`,"","### Details","",`- **Block ID**: \`${i.blockId}\``,`- Original link: \`${h}\``,`- Updated link: \`${s}\``,`- **Files affected**: ${(d=i.changes)==null?void 0:d.length}`,"","### Changes",""];p.length>0&&f.push(...p.map(m=>`- [[${C(m.originalFile)}]] (Line ${m.lineNumber+1})`)),o.length>0&&(p.length>0&&f.push(""),f.push(...o.map(m=>`- [[${C(m.originalFile)}]] (Canvas)`))),f.push("",`---
`);let r=f.join(`
`);if(!(n instanceof z.TFile))await l.vault.create(t.logFilePath,r);else{let m=await l.vault.read(n);await l.vault.modify(n,r+m)}}var U=class extends E.Plugin{constructor(t,e){super(t,e);this.currentBatchLog=null}async logChange(t){!this.settings.enableChangeLogging||this.currentBatchLog&&this.currentBatchLog.changes.push(t)}initBatchLog(t,e){this.currentBatchLog={timestamp:new Date().toISOString(),blockId:t,newFileName:e,description:`Block reference update: ^${t} \u2192 ${e}`,changes:[]}}async writeBatchToLog(){await J(this.app,this.settings,this.currentBatchLog),this.currentBatchLog=null}async showConfirmationDialog(t,e){return j(this.app,t,e)}async onload(){await this.loadSettings(),this.linkReplacer=new O({plugin:this,settings:this.settings,initBatchLog:this.initBatchLog.bind(this),showConfirmationDialog:this.showConfirmationDialog.bind(this),logChange:this.logChange.bind(this),writeBatchToLog:this.writeBatchToLog.bind(this),clearBatchLog:()=>{this.currentBatchLog=null}}),this.searchLinksHelper=new R(this.app,this.linkReplacer.replaceLinks.bind(this.linkReplacer)),this.blockReferenceManager=new P(this.app,this.linkReplacer.replaceLinks.bind(this.linkReplacer),this.settings.replaceExistingBlockLinks),this.addSettingTab(new S(this.app,this)),this.addCommand({id:"update-block-references",name:"Update block references from selection",editorCallback:t=>{let e=t.getSelection();if(!e){new E.Notice("Please select some text first");return}let n=_(e,this.app);if(!n){new E.Notice("No valid block ID found in selection");return}let i=this.app.workspace.getActiveFile();if(!i){new E.Notice("No active file");return}this.searchAndUpdateBlockReferences(n.blockId,i.basename)}})}async loadSettings(){this.settings=Object.assign({},G,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}showSearchModal(){new A(this.app,(t,e,n,i)=>{this.searchLinks(t,e,n,i)}).open()}async searchLinks(t,e,n,i){return this.searchLinksHelper.searchLinks(t,e,n,i)}async searchAndUpdateBlockReferences(t,e){return this.blockReferenceManager.searchAndUpdateBlockReferences(t,e)}async replaceLinks(t,e,n,i){return this.linkReplacer.replaceLinks(t,e,n,i)}};0&&(module.exports={});

/* nosourcemap */