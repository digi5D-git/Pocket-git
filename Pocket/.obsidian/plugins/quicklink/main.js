/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var N=(h,n)=>{for(var t in n)S(h,t,{get:n[t],enumerable:!0})},U=(h,n,t,g)=>{if(n&&typeof n=="object"||typeof n=="function")for(let e of y(n))!P.call(h,e)&&e!==t&&S(h,e,{get:()=>n[e],enumerable:!(g=D(n,e))||g.enumerable});return h};var I=h=>U(S({},"__esModule",{value:!0}),h);var Q={};N(Q,{default:()=>w});module.exports=I(Q);var r=require("obsidian");function E(h){var g;let n=((g=h.getLanguage)==null?void 0:g.call(h))||"en",t={zh:{enableSuggestions:"\u542F\u7528\u5EFA\u8BAE",enableSuggestionsDesc:"\u4F7F\u7528\u89E6\u53D1\u5B57\u7B26\u5EFA\u8BAE\u6587\u4EF6",triggerCharacter:"\u89E6\u53D1\u5B57\u7B26",triggerCharacterDesc:"\u89E6\u53D1\u6587\u4EF6\u5EFA\u8BAE\u7684\u5B57\u7B26",mainFolders:"\u4E3B\u4F53\u6587\u4EF6\u5939",mainFoldersDesc:"\u8BBE\u7F6E\u8BE5\u6587\u4EF6\u5939\u7528\u4E8E\u81EA\u52A8\u626B\u63CF\u6587\u6863\u8FDB\u884C\u81EA\u52A8\u8FDE\u63A5\u521B\u5EFA\u3002\u4F7F\u7528\u5168\u5C40\u89E6\u53D1\u7B26\u65F6\uFF0C\u4EC5\u5728\u8FD9\u4E9B\u6587\u4EF6\u5939\u4E2D\u641C\u7D22\uFF08\u7559\u7A7A\u8868\u793A\u5168\u5C40\uFF09\u3002",excludeFolders:"\u6392\u9664\u6587\u4EF6\u5939",excludeFoldersDesc:"\u6392\u9664\u641C\u7D22\u7684\u6587\u4EF6\u5939\uFF08\u6BCF\u884C\u4E00\u4E2A\uFF09",enableAdvancedUri:"\u542F\u7528\u9AD8\u7EA7 URI \u96C6\u6210",enableAdvancedUriDesc:'\u9700\u8981 "Advanced URI" \u63D2\u4EF6\u3002',uidFieldName:"UID \u5B57\u6BB5\u540D",uidFieldNameDesc:"\u7528\u4E8E\u9AD8\u7EA7 URI \u7684\u524D\u7F6E\u5143\u6570\u636E\u5B57\u6BB5\u540D\u3002",customRules:"\u81EA\u5B9A\u4E49\u89C4\u5219",ruleName:"\u89C4\u5219\u540D\u79F0",prefix:"\u524D\u7F00",includeFolders:"\u5305\u542B\u6587\u4EF6\u5939",includeFoldersDesc:"\u6BCF\u884C\u4E00\u4E2A\u6587\u4EF6\u5939",nameFilterRegex:"\u6587\u4EF6\u540D\u6B63\u5219",includeTags:"\u5305\u542B\u6807\u7B7E",includeTagsDesc:"\u6BCF\u884C\u4E00\u4E2A\u6807\u7B7E\uFF0C\u65E0\u9700#",deleteRule:"\u5220\u9664\u89C4\u5219",addRule:"\u6DFB\u52A0\u89C4\u5219",autoLinkScan:"\u81EA\u52A8\u94FE\u63A5\u626B\u63CF",autoLinkScanCurrentFile:"\u5728\u5F53\u524D\u6587\u4EF6\u4E2D\u81EA\u52A8\u94FE\u63A5\u626B\u63CF",ruleNamePlaceholder:"\u89C4\u5219\u540D\u79F0",prefixPlaceholder:"\u524D\u7F00"},en:{enableSuggestions:"Enable suggestions",enableSuggestionsDesc:"Trigger on character to suggest files",triggerCharacter:"Trigger character",triggerCharacterDesc:"Character that will trigger file suggestions",mainFolders:"Main folders",mainFoldersDesc:"Set these folders for auto-linking. When using the global trigger, search will be limited to these folders (leave empty for global search).",excludeFolders:"Exclude folders",excludeFoldersDesc:"Folders to exclude from search (one per line)",enableAdvancedUri:"Enable advanced URI integration",enableAdvancedUriDesc:'Requires the "Advanced URI" plugin.',uidFieldName:"UID field name",uidFieldNameDesc:"The frontmatter field name for the unique ID.",customRules:"Custom rules",ruleName:"Rule name",prefix:"Prefix",includeFolders:"Include folders",includeFoldersDesc:"One folder per line",nameFilterRegex:"Name filter regex",includeTags:"Include tags",includeTagsDesc:"One tag per line, without #",deleteRule:"Delete rule",addRule:"Add rule",autoLinkScan:"Auto link scan",autoLinkScanCurrentFile:"Auto link scan in current file",ruleNamePlaceholder:"Rule name",prefixPlaceholder:"Prefix"}};return t[n]||t.en}var $={autocompleteTriggerPhrase:"@",isAutosuggestEnabled:!0,excludeFolders:[],enableAdvancedUri:!1,triggerFilterRules:[],mainPaths:[],advancedUriField:"uid"},C=class extends r.AbstractInputSuggest{constructor(t,g){super(g,t);this.app=g}getSuggestions(t){return this.app.vault.getAllLoadedFiles().filter(e=>!(e instanceof r.TFile)).map(e=>e.path).filter((e,i,l)=>l.indexOf(e)===i).filter(e=>e.toLowerCase().contains(t.toLowerCase()))}renderSuggestion(t,g){g.setText(t)}selectSuggestion(t){}};async function M(h,n,t,g,e){let i=n.basename;if(e.settings.enableAdvancedUri){let l=h.vault.getName(),u=e.settings.advancedUriField,d=null,o=h.metadataCache.getFileCache(n);if(o!=null&&o.frontmatter&&u in o.frontmatter&&(d=o.frontmatter[u]),!d)try{let c=(await h.vault.read(n)).match(new RegExp(`\\n${u}:\\s*([^\\s\\n]+)`));c&&(d=c[1])}catch(a){}let s;if(d){let a=encodeURIComponent(u);s=`obsidian://advanced-uri?vault=${encodeURIComponent(l)}&${a}=${encodeURIComponent(d)}`}else s=`obsidian://advanced-uri?vault=${encodeURIComponent(l)}&filepath=${encodeURIComponent((0,r.normalizePath)(n.path))}`;return g?`[${g}](${s})`:`[${i}](${s})`}return h.fileManager.generateMarkdownLink(n,t,void 0,g)}function V(h){return h.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}var R=class extends r.PluginSettingTab{constructor(n,t){super(n,t),this.plugin=t}display(){let{containerEl:n}=this;n.empty();let t=E(this.app);new r.Setting(n).setName(t.enableSuggestions).setDesc(`${t.enableSuggestionsDesc} '${this.plugin.settings.autocompleteTriggerPhrase}'`).addToggle(e=>e.setValue(this.plugin.settings.isAutosuggestEnabled).onChange(async i=>{this.plugin.settings.isAutosuggestEnabled=i,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.isAutosuggestEnabled&&new r.Setting(n).setName(t.triggerCharacter).setDesc(t.triggerCharacterDesc).addText(e=>e.setValue(this.plugin.settings.autocompleteTriggerPhrase).onChange(async i=>{this.plugin.settings.autocompleteTriggerPhrase=i,await this.plugin.saveSettings()}));let g=(e,i)=>{var o;let l=e.inputEl;(o=l.parentElement)==null||o.addClass("quicklink-folder-input-container");let u=new C(l,this.app);u.selectSuggestion=async s=>{let a=l.value.split(`
`),{currentLineIndex:c}=d(l);if(c===-1)return;a[c]=s;let m=a.join(`
`),p=a.map(x=>(0,r.normalizePath)(x.trim())).filter(Boolean);i(p),await this.plugin.saveSettings(),l.value=m;let f=0;for(let x=0;x<c;x++)f+=a[x].length+1;f+=a[c].length,l.setSelectionRange(f,f)};let d=s=>{let a=s.value.split(`
`),c=s.selectionStart||0,m=0;for(let p=0;p<a.length;p++){let f=m+a[p].length;if(c>=m&&c<=f+1)return{currentLineIndex:p,currentLine:a[p]};m+=a[p].length+1}return{currentLineIndex:-1,currentLine:""}};u.getSuggestions=s=>{let{currentLine:a}=d(l),c=a.toLowerCase(),m=c.lastIndexOf("/"),p=m===-1?"":c.substring(0,m+1),f=c.substring(m+1),x=this.app.vault.getAllLoadedFiles().filter(F=>F instanceof r.TFolder&&F.path!=="/").map(F=>F.path),v=new Set;for(let F of x){let T=F.toLowerCase();if(p===""&&!T.includes("/"))v.add(F);else if(p!==""&&T.startsWith(p)&&T.length>p.length){let b=F.substring(p.length),A=b.indexOf("/"),L=A===-1?b:b.substring(0,A);v.add(p+L)}}return Array.from(v).filter(F=>F.toLowerCase().substring(m+1).includes(f)).sort().slice(0,10)}};new r.Setting(n).setName(t.mainFolders).setDesc(t.mainFoldersDesc).addTextArea(e=>{e.setValue(this.plugin.settings.mainPaths.join(`
`)),g(e,i=>this.plugin.settings.mainPaths=i),e.inputEl.addEventListener("blur",async()=>{let i=e.inputEl.value.split(`
`).map(l=>(0,r.normalizePath)(l.trim())).filter(Boolean);this.plugin.settings.mainPaths=i,await this.plugin.saveSettings()})}),new r.Setting(n).setName(t.excludeFolders).setDesc(t.excludeFoldersDesc).addTextArea(e=>{e.setValue(this.plugin.settings.excludeFolders.join(`
`)),g(e,i=>this.plugin.settings.excludeFolders=i),e.inputEl.addEventListener("blur",async()=>{let i=e.inputEl.value.split(`
`).map(l=>(0,r.normalizePath)(l.trim())).filter(Boolean);this.plugin.settings.excludeFolders=i,await this.plugin.saveSettings()})}),new r.Setting(n).setName(t.enableAdvancedUri).setDesc(t.enableAdvancedUriDesc).addToggle(e=>e.setValue(this.plugin.settings.enableAdvancedUri).onChange(async i=>{this.plugin.settings.enableAdvancedUri=i,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableAdvancedUri&&new r.Setting(n).setName(t.uidFieldName).setDesc(t.uidFieldNameDesc).addText(e=>e.setValue(this.plugin.settings.advancedUriField).onChange(async i=>{this.plugin.settings.advancedUriField=i,await this.plugin.saveSettings()})),new r.Setting(n).setName(t.customRules).setHeading(),this.plugin.settings.triggerFilterRules.forEach((e,i)=>{let l=n.createEl("details");l.addClass("quicklink-rule-panel");let u=l.createEl("summary");u.addClass("quicklink-rule-summary"),u.setText(`Rule ${i+1}: ${e.name||"New Rule"}`);let d=l.createDiv();new r.Setting(d).setName(t.ruleName).addText(o=>{o.setPlaceholder(t.ruleNamePlaceholder).setValue(e.name).onChange(async s=>{e.name=s,await this.plugin.saveSettings(),u.setText(`Rule ${i+1}: ${e.name||"New Rule"}`)})}),new r.Setting(d).setName(t.prefix).addText(o=>{o.setPlaceholder(t.prefixPlaceholder).setValue(e.prefix).onChange(async s=>{e.prefix=s,await this.plugin.saveSettings()})}),new r.Setting(d).setName(t.includeFolders).setDesc(t.includeFoldersDesc).addTextArea(o=>{o.setValue(e.includeFolders.join(`
`)),g(o,s=>e.includeFolders=s),o.inputEl.addEventListener("blur",async()=>{let s=o.inputEl.value.split(`
`).map(a=>(0,r.normalizePath)(a.trim())).filter(Boolean);e.includeFolders=s,await this.plugin.saveSettings()})}),new r.Setting(d).setName(t.nameFilterRegex).addText(o=>o.setValue(e.nameFilterRegex).onChange(async s=>{e.nameFilterRegex=s,await this.plugin.saveSettings()})),new r.Setting(d).setName(t.includeTags).setDesc(t.includeTagsDesc).addTextArea(o=>{o.setValue(e.includeTags.join(`
`)),o.inputEl.addEventListener("blur",async()=>{let s=o.inputEl.value.split(`
`).map(a=>a.trim()).filter(Boolean);e.includeTags=s,await this.plugin.saveSettings()})}),new r.Setting(d).addButton(o=>{o.setButtonText(t.deleteRule).setWarning().onClick(async()=>{this.plugin.settings.triggerFilterRules.splice(i,1),await this.plugin.saveSettings(),this.display()})})}),new r.Setting(n).addButton(e=>e.setButtonText(t.addRule).onClick(async()=>{this.plugin.settings.triggerFilterRules.push({prefix:"",name:"",includeFolders:[],nameFilterRegex:"",includeTags:[]}),await this.plugin.saveSettings(),this.display()}))}},k=class extends r.EditorSuggest{constructor(n,t){super(n),this.plugin=t}getSuggestions(n){var o;let g=n.query.trimStart(),e=this.plugin.settings.autocompleteTriggerPhrase,i=this.app.vault.getMarkdownFiles().filter(s=>!this.plugin.settings.excludeFolders.some(a=>s.path.startsWith((0,r.normalizePath)(a)+"/"))),l=this.plugin.settings.triggerFilterRules.find(s=>s.prefix.length>0&&g.startsWith(s.prefix)),u=l?g.slice(l.prefix.length).trim():g.slice(e.length).trim();if(l){if(l.includeFolders.length&&(i=i.filter(s=>l.includeFolders.some(a=>s.path.startsWith((0,r.normalizePath)(a)+"/")))),l.nameFilterRegex)try{let s=new RegExp(l.nameFilterRegex);i=i.filter(a=>s.test(a.basename))}catch(s){}l.includeTags&&l.includeTags.length&&(i=i.filter(s=>{let a=this.app.metadataCache.getFileCache(s);return a?((0,r.getAllTags)(a)||[]).some(m=>l.includeTags.includes(m.substring(1))):!1}))}if(!l&&((o=this.plugin.settings.mainPaths)!=null&&o.length)&&(i=i.filter(s=>this.plugin.settings.mainPaths.some(a=>s.path.startsWith((0,r.normalizePath)(a)+"/")))),u){let s=u.toLowerCase();i=i.filter(a=>a.basename.toLowerCase().includes(s)||a.path.toLowerCase().includes(s))}return i.slice(0,50).map(s=>({label:s.basename,file:s,path:s.path}))}renderSuggestion(n,t){t.setText(n.label);let g=n.path.split("/");g.pop(),t.createSpan({cls:"suggestion-note",text:` (${g.join("/")})`})}async selectSuggestion(n,t){if(!this.context)return;let{editor:g,start:e,end:i,file:l}=this.context,u=t.shiftKey?this.context.query:void 0,d=await M(this.app,n.file,l.path,u,this.plugin);g.replaceRange(d,e,i)}onTrigger(n,t,g){if(!this.plugin.settings.isAutosuggestEnabled)return null;let e=t.getCursor(),i=t.getLine(e.line),l=-1,u="";for(let a of this.plugin.settings.triggerFilterRules)if(a.prefix.length>0){let c=i.lastIndexOf(a.prefix,e.ch-a.prefix.length);if(c!==-1){l=c,u=a.prefix;break}}if(l===-1){let a=this.plugin.settings.autocompleteTriggerPhrase,c=i.lastIndexOf(a,e.ch-a.length);c!==-1&&(l=c,u=a)}if(l===-1)return null;let d={line:e.line,ch:l},o=e,s=i.substring(l,e.ch);return{editor:t,file:g,start:d,end:o,query:s}}},w=class extends r.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new R(this.app,this)),this.suggest=new k(this.app,this),this.registerEditorSuggest(this.suggest);let n=E(this.app);this.addRibbonIcon("link-2",n.autoLinkScan,()=>{this.runAutoScan()}),this.addCommand({id:"run-auto-scan",name:n.autoLinkScanCurrentFile,checkCallback:t=>this.app.workspace.getActiveViewOfType(r.MarkdownView)?(t||this.runAutoScan(),!0):!1})}onunload(){}async runAutoScan(){var i;let n=this.app.workspace.getActiveViewOfType(r.MarkdownView);if(!n||!n.file){new r.Notice("Please use this feature in a Markdown view");return}let t=n.file,g=this.app.vault.getMarkdownFiles();(i=this.settings.mainPaths)!=null&&i.length&&(g=g.filter(l=>this.settings.mainPaths.some(u=>l.path.startsWith((0,r.normalizePath)(u)+"/"))));let e=0;await this.app.vault.process(t,l=>{let u=l;for(let d of g){let o=d.basename,s=`(^|\\W)${V(o)}(?=\\W|$)`,a=new RegExp(s,"g"),c=u.match(a);if(c&&c.length>0){e+=c.length;let m=this.app.fileManager.generateMarkdownLink(d,t.path,void 0,o);u=u.replace(a,(p,f)=>`${f}${m}`)}}return u}),new r.Notice(`Auto scan complete. ${e} links were created.`)}async loadSettings(){this.settings=Object.assign({},$,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */